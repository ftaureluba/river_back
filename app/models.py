from django.db import models


class JugadorModel(models.Model):
    player = models.CharField(max_length=100)
    nation = models.CharField(max_length=100)
    position = models.CharField(max_length=100)
    age = models.CharField(max_length=100)
    matchesPlayed = models.IntegerField()
    starts = models.IntegerField()   
    minutesPlayed = models.FloatField()
    nineties = models.IntegerField()
    goals = models.IntegerField()
    assists = models.IntegerField()
    goalsPlusAssists = models.IntegerField()
    goalsMinusPenalties = models.IntegerField()
    penalties = models.IntegerField()
    penaltiesAttempted = models.IntegerField()
    yellowCards = models.IntegerField()
    redCards = models.IntegerField()
    expectedGoals = models.FloatField()
    nonPenaltyExpectedGoals = models.FloatField()
    expectedAssists = models.FloatField()
    nonPenaltyGoalsPlusExpectedAssists = models.FloatField()
    progressiveCarries = models.IntegerField()
    progressivePasses = models.IntegerField()
    progressivePassesReceived = models.IntegerField()
    goalsPerNinety = models.FloatField()
    assistsPerNinety = models.FloatField()
    goalsPlusAssistsPerNinety = models.FloatField()
    goalsMinusPenaltiesPerNinety = models.FloatField()
    goalsPlusAssistsMinusPenaltiesPerNinety = models.FloatField()
    expectedGoalsPerNinety = models.FloatField()
    expectedAssistsPerNinety = models.FloatField()
    expectedGoalsPlusAssistsPerNinety = models.FloatField()
    nonPenaltyExpectedGoalsPerNinety = models.FloatField()
    nonPenaltyGoalsPlusExpectedAssistsPerNinety = models.FloatField()


class ShootingModel(models.Model):
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    goals = models.IntegerField()
    shotsTotal= models.IntegerField()
    shotsOnTarget= models.IntegerField()
    percentShotsOnTarget = models.FloatField()
    shotsPerNinety = models.FloatField()
    shotsOnTargetPerNinety = models.FloatField()
    goalsPerShot = models.FloatField()
    goalsPerShotOnTarget = models.FloatField()
    averageShotDistance = models.FloatField()
    shotFromFreekicks= models.IntegerField()
    penaltyKicks= models.IntegerField()
    penaltyKicksAttempted= models.IntegerField()
    expectedGoals = models.FloatField()
    nonPenaltyExpectedGoals = models.FloatField()
    nonPenaltyExpectedGoalsPerShot = models.FloatField()
    goalsMinusExpectedGoals = models.FloatField()
    nonPenaltyGoalsMinusNonPenaltyExpectedGoals = models.FloatField()


class GoalkeeperStats(models.Model):
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    goalsAgainst = models.IntegerField()  
    penaltiesAgainst = models.IntegerField()
    freeKicksAgainst = models.IntegerField()  
    cornerKicksAgainst = models.IntegerField() 
    ownGoals = models.IntegerField()  

    postShotExpectedGoals = models.FloatField()
    psxgPerShotOnTarget = models.FloatField()  
    psxgGoalDifference = models.FloatField() 
    psxgPer90 = models.FloatField() 
    launchedCompleted = models.IntegerField()  
    launchedAttempted = models.IntegerField() 
    launchCompletionPercentage = models.FloatField()  
    
    goalkeeperPassesAttempted = models.IntegerField()  
    throwsAttempted = models.IntegerField()  
    launchPassesPercentage = models.FloatField()  
    launchAvgLength = models.FloatField()  
    
    goalKicksAttemptedOther = models.IntegerField()  
    goalKicksLaunchPercentage = models.FloatField()  
    goalKicksAvgLength = models.FloatField()  
    
    crossesFaced = models.IntegerField()  
    crossesStopped = models.IntegerField()  
    crossesStoppedPercentage = models.FloatField()  
    
    sweeperActions = models.IntegerField()  
    sweeperActionsPer90 = models.FloatField()  
    avgDistanceOfSweeperActions = models.FloatField()


class Passing(models.Model):
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    completed = models.IntegerField()
    attempted = models.IntegerField()
    completedPercentage = models.FloatField()
    totalDistance = models.IntegerField()
    totalProgressiveDistance = models.IntegerField()
    shortCompleted = models.IntegerField()
    shortAttempted = models.IntegerField()
    shortCompletedPercentage  = models.FloatField()
    mediumCompleted = models.IntegerField()
    mediumAttempted = models.IntegerField()
    mediumCompletedPercentage = models.FloatField()
    longCompleted = models.IntegerField()
    longAttempted = models.IntegerField()
    longCompletedPercentage =models.FloatField()
    assists = models.IntegerField()
    expectedAssistedGoals = models.FloatField()
    expectedAssists = models.FloatField()
    assistsMinusExpectedGoalsAssisted = models.FloatField()
    keyPasses = models.IntegerField()
    passesIntoTheFinalThird = models.IntegerField()
    passesIntoPenaltyArea = models.IntegerField()
    crossesIntoPenaltyArea = models.IntegerField()
    progressivePasses = models.IntegerField()


class PassTypes(models.Model):
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    passesAttempted = models.IntegerField()
    livePasses = models.IntegerField()
    deadPasses = models.IntegerField()
    freeKicks = models.IntegerField()
    throughBalls = models.IntegerField()
    switches = models.IntegerField()
    crosses = models.IntegerField()
    throwIns = models.IntegerField()
    corners = models.IntegerField()
    cornersIn = models.IntegerField()
    cornersOut =models.IntegerField()
    cornersStraight = models.IntegerField()
    passesCompleted = models.IntegerField()
    passesOffside = models.IntegerField()
    passesBlocked = models.IntegerField()

class GoalAndShotCreation(models.Model): 
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    shotCreatiingAction = models.IntegerField()
    shotCreatiingActionPerNinety = models.FloatField()
    liveSCA = models.IntegerField()
    deadSCA = models.IntegerField()
    takeOnSCA = models.IntegerField()
    shotSCA = models.IntegerField()
    fouldDrawnSCA = models.IntegerField()
    defensiveSCA = models.IntegerField()
    goalCreatingAction = models.IntegerField()
    goalCreatingActionPerNinety = models.FloatField()
    liveGCA =models.IntegerField()
    deadGCA = models.IntegerField()
    takeOnGCA =models.IntegerField()
    shotGCA = models.IntegerField()
    fouldDrawnGCA = models.IntegerField()
    defensiveGCA = models.IntegerField()


class DefensiveActions(models.Model):
    player = models.OneToOneField(JugadorModel, on_delete=models.CASCADE)
    tackles = models.IntegerField()
    tacklesWon = models.IntegerField()
    tacklesDefensiveThird = models.IntegerField()
    tacklesMiddleThird = models.IntegerField()
    tacklesAttackingThird = models.IntegerField()
    dribblersTackled = models.IntegerField()
    dribblesChallenged = models.IntegerField()
    dribblersTackledPercentage = models.FloatField()
    challengesLost = models.IntegerField()
    blocks = models.IntegerField()
    shotsBlocked = models.IntegerField()
    passesBlocked = models.IntegerField()
    interceptions = models.IntegerField()
    tacklesPlusInterceptions = models.IntegerField()
    clearances = models.IntegerField()
    errors = models.IntegerField()

    